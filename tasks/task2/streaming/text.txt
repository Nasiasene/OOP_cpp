
1) Streaming System

**Exercise Objective:** Create a class hierarchy that simulates a music streaming system.

1. Create an abstract class called `Music`, which will represent a generic song in the system. This class must have the following members:
   - A private data member `title` to store the song title.
   - A private `artist` data member to store the artist name.
   - A constructor that accepts two parameters to initialize the title and artist.
   - A pure virtual member function called `play()` that will be used to "play" the song.

2. Create a class called `LocalMusic` that publicly inherits from the `Musica` class. This class must have the following members:
   - A private data member `filepath` to store the song file path.
   - A constructor that accepts three parameters to initialize the title, artist and file path.
   - An implementation of the `play()` function that "plays" local music, displaying a message that includes the title, artist, and file path.

3. Create another class called `StreamingMusic` that also publicly inherits from the `Musica` class. This class must have the following members:
   - A private `url` data member to store the song URL.
   - A constructor that accepts three parameters to initialize the title, artist and URL.
   - An implementation of the `play()` function that "plays" streaming music, displaying a message that includes the title, artist, and URL.

4. In `main()`, create objects of the `LocalMusic` and `StreamingMusic` classes, store them in a vector of pointers to `Musica`, and then traverse the vector, calling the `play()` function for each music. This will demonstrate dynamic binding in action.

--------------------

2) Streaming System with Podcast support

**Exercise Objective:** Extend the music streaming system to include podcasts, which have additional features such as a host and episode list. Additionally, podcasts can be played in a special mode that includes the host's intro and outro.

1. Create a `Podcast` class that publicly inherits from the `Music` class. This class must have the following members:
   - A private data member `host` to store the name of the podcast host.
   - A private data member `episodios` to store the list of podcast episodes.
   - A constructor that accepts three parameters to initialize the title, the artist (in this case, it could be the network or the podcast producer), and the presenter.
   - An `addEpisode()` function to add episodes to the list.
   - An implementation of the `play()` function that "plays" the podcast, displaying a message that includes the title, network, host, and episode list.

2. Modify the `Musica` class to include a protected method `playIntro()`. This method should display a generic message indicating that the song is about to be played.

3. In the `Podcast` class, override the `tocarIntro()` method to include the presenterâ€™s introduction.

4. In the `play()` method of the `Podcast` class, first call the `playIntro()` method, thus demonstrating the use of protected methods.

5. Create a `PodcastPremium` class that privately inherits from the `Podcast` class. This class represents a premium podcast that requires a subscription to play.
   - Add a private data member `price` to represent the subscription price.
   - Provide public methods to access podcast functionality (such as playing and adding episodes), thus demonstrating private inheritance.

6. In `main()`, create objects of the classes `LocalMusic`, `StreamingMusic` and `Podcast`, store them in a vector of pointers to `Musica`, and then traverse the vector, calling the `play() function for each song. This will demonstrate dynamic binding in action.