**Exercise: A company's employee management system**

Consider an employee management system in a company. Create the following classes:

1. **`employee`** (base class)
   - Private attributes: `name`, `age`.
   - Constructor method to initialize `name` and `age`.
   - `print_info()` method that displays general information about the employee.
   - Overloading of `<<` operator to display employee details.
   
2. **`manager`** (publicly inherits from `employee`)
   - Additional private attributes: `department`, `access_level`.
   - Constructor method that calls the base class constructor and initializes `department` and `acess_level`.
   - Overridden `print_info()` method to display manager-specific information, including department and access level.
   - Implements a public method `define_nivel_acesso()` that allows you to configure the manager's access level.

3. **`developer`** (inherits protected from `employee`)
   - Additional private attributes: `linguagem_programacao`.
   - Constructor method that calls the base class constructor and initializes the `programming_language`.
   - Overridden `print_info()` method to display developer-specific information, including programming language.

4. **`analyst`** (inherits private from `employee`)
   - Additional private attributes: `current_project`.
   - Constructor method that calls the base class constructor and initializes the `current_project`.
   - Overridden `print_info()` method to display analyst-specific information, including the current project.
   - Implements a public method `alterar_projeto()` that allows analysts to change the current project.

5. **`EmployeeIntern`** (inherits from `developer` and `analyst`)
   - Additional private attributes: `duracao_estagio`.
   - Constructor method that calls the constructors of the base classes and initializes the `duracao_estagio`.
   - Overridden `print_info()` method to display intern-specific information, including internship duration.

Now, create objects from these classes in the main() function and demonstrate the inheritance and access relationships to members of each class. Be sure to create instances of all classes and demonstrate how inherited attributes and methods are accessed in each case.