+ The use of pointers works in the same way as in the c language.

+ To create a pointer, just do the same as any variable, however, putting a * in front of its name.
ex
<ptr_type> *p = <var>; // A pointer of type "ptr_type".

- a pointer has as its value a MEMORY POSITION.
- to access it just: *p (in this way, I will be accessing the VARIABLE that the pointer is POINTING TO.)
- "&" is used to know the memory position of any variable.
- nullptr is the null pointer or = 0.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ Reference
- widely used as a function parameter.
- has a similar use to pointers, as it is used to REFERENCE another variable.
- reference is also commonly called NAME, since through it it is possible to access/modify the variable it references in a simple way.
- it will share the same memory position as the variable in which it references.
- Unlike a pointer, a reference once initialized cannot be made to refer to a different object or set to null.
ex
<var_type> & ref = <var>;
-- in function:
void func(int & x){...}
int main(){
    int x=0;
    func(x);
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------