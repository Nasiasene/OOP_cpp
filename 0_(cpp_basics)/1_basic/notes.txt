- Cpp (C plus plus) is a language based on C in which it is possible to work with the object orientation paradigm.

- The C++ language allows C codes to be executed in the same way, since the C language is included within C++.

- Replaces stdio.h for IOSTTREAM

- iostram: (io = input/output) used to receive information or give information to the user via the stream.
Note: it is necessary to use the prefix std::

cout = printf (use << )
cin = scanf ( use >> )


1.Cmath
2.Namespace
3.Type Conversion
4.If/Else
5.Strings
6.Loops
7.Random
8.Functions

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Tips to remember:

- using namespace std; //this way is no longer necessary to use the prefix std:: in the iostram functions
- std::endl; // similar to "\n"
- #define var value; // to define an constant

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ Cmath: package that includes mathematical functions.
#include <cmath>

min = min between two numbers ex: min(1, 9) //1
max = max between two numbers ex: max(1, 9) //9
round = round an number ex: round(3.14) //3
ceil = round UP a value ex: ceil(1.3) //2
floor = round down a value ex: floor(1.3) //1
pow = power a number by another ex: pow(2, 3) //8
sqrt = square root of an number ex: sqrt(9) //3
abs = absolute value of an number ex: abs(-8) //8


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ Namespace: i can create an namespace for one variable that have multiple values.

ex:
namespace first{
    int x = 1;
}
int main(){
    int x = 2;
    std::cout << x;         // 2
    std::cout << first::x;  // 1
}
int main2(){
    using namespace first;

    std::cout << x; //1
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ Type Conversion: i can convert a value of one datatype to another.

ex:
double pi = 3.14;
cout << (int) pi;      //3
cout << (int) 3.14;    //3

int x = 3, y = 10;
double j = x/y;
cout << j;             //0
cout << (double) x/y   //0.3


i just has to put an (<new_datatype>) before da value/variable.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ If/Else:

if(...){}
else if(...){}
else{}

OBS: ==  /  !=  /  >=  /  <=  
     && (and)  /  || (or)


+ Switch-Case:

Switch(<var>){
    case <var_value1>:
        (...)
        break;
    case <var_value2>:
        (...)
        break;
    case <var_value3>:
        (...)
        break;
    default:    // works like an else 
        (...)
};


+ Ternary operator: Its an replacement to an if/else statement.
<condition> ? <TRUE_what_to_do> : <FALSE_what_to_do>;

e.x:
number = 3;
number % 2 == 0 ? cout << "It's even" : cout << "It's odd";  //It's odd
number == 3 ? cout << "It's 3" : cout << "It'snt 3";         //It's 3
number == 4 ? x = x : x = x + 1;    // x = 4

bool t = true;
t ? cout << "true" : cout << "false";  //true

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ Strings: similar to python, i can play with strings.

getline(cin, <var_str>);       // will atribute the entire entry (with spaces) to the string variable.
string.length();               // return the length of the string.
string.empty();                // return true if the string is empty ("") or false if not.
string.clear();                // clear the string variable, same as string = "";
string.append("<str>");        // append a 'str' to the end of the string,  same as string += str;
string.at(<index>);            // returns a character at the given index.  
string.insert(<index>, <str>)  // Insert an string in the given index.
string.find(<str>)             // give the firts index where the str appears in the string.
string.erase(<first_index>, <last_index>)  // erase parte of the string.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ While Loops:

while (<condition>){ };

- Do While:

do{ }while(<something>);

+ For Loop:

for(int i = num; i < num; i++){ }


Obs:
continue; // restart the loop;
break;    // break the statement;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ "Random" number:
#include <ctime>  // to take the time.

srand(time(0))   //time(0) = currently time. This is being used as an seed to the random number (s=seed).

int num = rand();                     //random number between 0-32767.
int new_num = (rand() % 6);           //random number between 0-5.
int new_new_num = (rand() % 4) + 1;   //random number between 1-4.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

+ Functions: Most used to avoid code repetition, its an block of code, similar to the main.

declaration:
<type return> <name_func>(<parameters>){};
ex
void print_var(string var, int i){
    cout << i << var << endl;
}

use in main:
print_var("Oi", 2);  //2Oi

- a function has to declare her type of return.
- if dont have an return, use void.
- the return of a function has to be the same datatype of the function type.

-- OBS: To use an function in the main, he has to be declare before the main function.
     You can just declare the function afetr the main, and before that, you can work on the function, this help the organization.
ex:

void print_var(string var, int i);

int main() { '(...) }

void print_var(string var, int i){ (...) }


-- OBS2: Overloaded function, i can have diferent functions with the sam name, but, they have to receive diferent parameters.
ex:

void hi(){
    cout << "Hi";
}
void hi(string name){
    cout << "Hi " << name;
}
void hi(strin name, int age){
    cout << "Hi " << name << " you have " << age << " years old";
}


-- OBS3: Variable scope, variables has an scope inside an function, to be accessed she has to be inside th efunction she was called.
         to use variables in diferente scope, she has to be declare as an global variable, or, be declare after de scope function and outside the scope of other function.
         if you have an global variable and a local variable inside an function, the local is predominant as the global.
         using "::" as a prefix for the variable that is a global var and a local var at the same time, then it will be the global one.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------