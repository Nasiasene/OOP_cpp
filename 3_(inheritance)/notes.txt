--------------------------------------------------------------------------------------------------------------------------------------------------------

+ Inheritances (Derived Classes):

OBS: != COMPOSITION (an object that inherits from another IS AN inherited object. an object that is composed of another HAS AN object in its composition)

-- Useful for code reuse and organization.
-- Relationship between classes.
-- A class (child) inherits attributes and methods from another class (parent).
(ex: Class1(mother): Geometric_Shape. Classes2-3(Children): Circle, Triangle)
--- In the case above Geometric_Shape would be a BASE CLASS (superclass) and circle and Triangle would be DERIVATIVE CLASSES (subclasses).

-- An object can inherit from one or more classes (Multiple Inheritance).
-- When a class inherits from another, it inherits its member attributes and functions.
-- private elements CANT BE ACESSIBLE.
-- generally the superclass is simpler and more generalized to other classes.

------------------------------

- SITANX:

<sub_class> : <inheritances_type> <superclass>{}

-- When a class inherit from another, has to initialize the mother class in its constructor!

------------------------------

- PROTECTED: halfway between public and private
-- makes elements unreachable to anything outside the class.
-- works similar to private however, but UNLIKE private, any class that inherits from this protected class will HAVE ACESS to these elements.

------------------------------

- PUBLIC type inheritance:
-- All members of the parent class continue to have the same access. (public=public, protected=protected, private=ERROR)

- PROTECTED type inheritance:
-- PUBLIC members become PROTECTED, and protected remain protected. (public=protected, protected=protected, private=ERROR)

- PRIVATE type inheritance:
--PUBLIC members become PRIVATE, and protected members become PRIVATE. (public=private, protected=private, private=ERROR)

------------------------------

































- Polymorphism: allows objects of different classes to be treated uniformly through a common interface. The term "polymorphism" means "many forms".

-- é necessario trabalhar com ponteiros para permitir a vinculação dinamica.
-- Caso eu crie um ponteiro do mesmo tipo da classe mae e que aponte para um objeto que herde da classe mae esse ponteiro funcionará como se fosse um objeto da classe MÃE.


-FUNÇÕES VIRTUAIS: é uma função que é declarada na classe base e que pode ser sobrescrita em classes derivadas.

-- Isso é fundamental para alcançar o polimorfismo em tempo de execução, onde a chamada de função é resolvida com base no tipo real do objeto em tempo de execução.
-- Declarar a função na classe base com a palavra-chave 'virtual'.
Definir a mesma função nas classes derivadas usando a palavra-chave 'override'

Class mae{
    virtual void fazerSom() {
        (...)
    }
}
Class maezinha : public mae {
    virtual void fazerSom() override {
        std::cout << "Som genérico de animal" << std::endl;
    }
}
Class maezona : public mae{
    virtual void fazerSom() override {
       (...)
    }
}

-- usando funcoes virtuais, quando um ponteiro do tipo da classe mae, aponta para um objeto da classe filha, ele poderá usar as funcoes virtuais da classe filha(o que nao acontece se nao for ponteiro e/ou a funcao nao seja virtual).

ex:
Forma* vetor[3];
vetor[0] = new Retangulo(2, 3, 4);
vetor[1] = new Forma(1);
vetor[2] = new Circulo(2, 3);

for (auto x : vetor){
    x.print_info();
}

//Dessa forma, como circulo e rtangulo herdam de forma, e a funcao print_info é virtual, esse codigo printará valores diferentes.


- Classes abstratas: classes que servem como blueprint.
-- Não podem instanciar objetos.
-- Servem somente como base para ouras classes.

ex:
class Forma {
public:
    virtual void desenhar() = 0; // Função abstrata //FUNCAO VIRTUAL PURA.
    virtual double area() const = 0; // Outra função abstrata //FUNCAO VIRTUAL PURA.

    void mover(int x, int y) {
        // Implementação concreta para mover a forma
    }
};

--OBS: o metodo virtual puro é o que define a classe ser abstrata

--------------------------------------------------------------------------------------------------------------------------------------------------------