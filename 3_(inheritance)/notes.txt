--------------------------------------------------------------------------------------------------------------------------------------------------------

+ Inheritances (Derived Classes):

OBS: != COMPOSITION (an object that inherits from another IS AN inherited object. an object that is composed of another HAS AN object in its composition)

-- Useful for code reuse and organization.
-- Relationship between classes.
-- A class (child) inherits attributes and methods from another class (parent).
(ex: Class1(mother): Geometric_Shape. Classes2-3(Children): Circle, Triangle)
--- In the case above Geometric_Shape would be a BASE CLASS (superclass) and circle and Triangle would be DERIVATIVE CLASSES (subclasses).

-- An object can inherit from one or more classes (Multiple Inheritance).
-- When a class inherits from another, it inherits its member attributes and functions.
-- private elements CANT BE ACESSIBLE.
-- generally the superclass is simpler and more generalized to other classes.

------------------------------

- SITANX:

<sub_class> : <inheritances_type> <superclass>{}

-- When a class inherit from another, has to initialize the mother class in its constructor!

------------------------------

- PROTECTED: halfway between public and private
-- makes elements unreachable to anything outside the class.
-- works similar to private however, but UNLIKE private, any class that inherits from this protected class will HAVE ACESS to these elements.

------------------------------

- PUBLIC type inheritance:
-- All members of the parent class continue to have the same access. (public=public, protected=protected, private=ERROR)

- PROTECTED type inheritance:
-- PUBLIC members become PROTECTED, and protected remain protected. (public=protected, protected=protected, private=ERROR)

- PRIVATE type inheritance:
--PUBLIC members become PRIVATE, and protected members become PRIVATE. (public=private, protected=private, private=ERROR)

------------------------------

- An object of a subclass is both an instance of the child class and the parent class.
- If I create an object from an abstract class and make interactions with a subclass that inherits from that abstract class. From the object part of a subclass, only its abstract part is used.

- An object can inherit from two different classes.
    - If classes inherit from the same abstract class, be aware that the subclass will inherit from this abstract class twice.

--------------------------------------------------------------------------------------------------------------------------------------------------------


+ Polymorphism: allows objects of different classes to be treated uniformly through a common interface. The term "polymorphism" means "many forms".

- Through polymorphism, different classes that have the same hierarchy can respond to a function in different ways.
- Allows you to write codes in an even more general way.
- Remember, in a class hierarchy, it is possible to determine that an object from a superclass receives the values ​​of an object from a subclass,
  however, it loses the extra information present in the subclass. (the opposite does not happen)

- It is necessary to work with pointers to allow dynamic linking.
- If I create a pointer of the superclass type(mother) and which points to an object of a subclass(child), this pointer will work as if it were an object of the MOTHER class.
- A pointer to a base class(superclass) can point to any object in one of its subclasses.
- It is the type of the pointer that determines what can or cannot be called, not the object being pointed to.

- THROUGH POLYMORPHISM, IF THERE IS A VIRTUAL FUNCTION, ITS VALUE WILL BE DETERMINED BY THE TYPE OF THE OBJECT BEING POINTED TO.
- When declaring a virtual function in the superclass, it can be overridden by its children.
- override = reset the function.

------------------------------

- VIRTUAL FUNCTIONS: is a function that is declared in the base class and that can be overridden in derived classes.

-- It is crucial to achieve runtime polymorphism, where the function call is resolved based on the actual type of the object at runtime.
-- Just declare the function in the base class with the 'virtual' keyword.
   Define the same function in derived classes using the 'override' keyword.
   If you want, you don't need to call virtual and override in the subclasses, just call the function normally.
ex:
Class Animal{
    virtual void makeSound() {
        (...)
    }
}
Class Dog: public Animal {
    virtual void makeSound() override {
        std::cout << "WOOOF" << std::endl;
    }
}
Class Cat: public Animal{
    void makeSound() {
       (...)
    }
}

-- using virtual functions, when a pointer of the Animal class type points to an object of the child class, it can use the virtual functions of the child class (which does not happen if it is not a pointer and/or the function is not virtual).
ex:
Shape* vector[3];
vector[0] = new Rectangle(2, 3, 4);
vector[1] = new Shape(1);
vector[2] = new Circle(2, 3);
for (auto x : vector){
    x.print_info();
}
//This way, as circle and rectangle inherit shape, and the print_info function is virtual, this code will print different values.

------------------------------

- Abstract classes: classes that serve ONLY as a blueprint.

-- Cannot instantiate objects. (because they are "incomplete")
-- They only serve as a basis for other classes.
ex:
class Form {
public:
    virtual void draw() = 0; // Abstract function // PURE VIRTUAL FUNCTION.
    virtual double area() const = 0; // Abstract function // PURE VIRTUAL FUNCTION.

    void moove(int x, int y) {
        // Concrete implementation to move the shape
    }
};


-- NOTE: the pure virtual method is what defines the class to be abstract.

------------------------------

- Pure Virtual Function: is a virtual function in a base class that must be IMPLEMENTED BY ALL derived classes, and does not have an implementation in the base class.

-- Is specified by placing a "= 0".
-- There is no implementation in the abstract class.
-- Every concrete class that inherits from an abstract class with a pure abstract function must MANDATORY override these pure functions.
-- Virtual functions differ from pure virtual functions, as non-pure ones only give the programmer the option to rewrite them, pure ones are mandatory.
ex:
virtual double area() = 0; 